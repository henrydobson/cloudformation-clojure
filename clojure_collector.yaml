---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Clojure app with Tomcat 7 on Amazon Linux instance using UserData bootstrap and Ansible pull method to provision nodes in ASG."
Metadata:
  Instances:
    Description: "These instances are part of an ASG. They have rights throught the ... role to access S3. This is to facilitate instance user data to provision the device for Ansible pull."
Parameters:
  OperatorEmail:
    Description: Email address for scaling operation notifications.
    Type: String
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)"
    Default: "henrydobson@me.com"
    ConstraintDescription: Must be a valid email address.
  KeyPair:
    Description: Select your Amazon EC2 KeyPair.
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: Must be an existing EC2 KeyPair.
  PermittedSSHSourceIP:
    Description: The IP addresses that can be used to SSH the EC2 instances.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be valid IP CIDR range in the form of x.x.x.x/x
  AWSRegion:
    Description: The desired AWS Region.
    Type: String
    Default: eu-west-1
    AllowedValues:
      - eu-west-1
      - eu-central-1
    ConstraintDescription: Must be eu-west-1 or eu-central-1.
  WorkingVPC:
    Description: The preferred AWS VPC.
    Type: "AWS::EC2::VPC::Id"
  EnvironmentType:
    Description: The environment type.
    Type: String
    Default: testing
    AllowedValues:
      - production
      - testing
    ConstraintDescription: Must be a production or testing
  S3ProvisioningBucket:
    Description: Comma separated list for 1) S3 bucket name and 2) object for provisioning EC2 instances in UserData.
    Type: CommaDelimitedList
    ConstraintDescription: 1st value must contain the S3 bucket name, 2nd value must contain an S3 object.
Mappings:
  RegionAndInstanceTypeToAMIID:
    eu-central-1:
      testing: "ami-0044b96f"
      production: "ami-0044b96f"
    eu-west-1:
      testing: "ami-d41d58a7"
      production: "ami-d41d58a7"
  EnviromentTypeToInstanceType:
    testing:
      "64": t2.micro
    production:
      "64": m1.small
Conditions:
  CreateProductionResources: !Equals [ !Ref EnvironmentType, production ]
Resources:
  NotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref "OperatorEmail"
          Protocol: "email"
  ClojureRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "clojurerole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:GetObject"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Select [ 0, !Ref "S3ProvisioningBucket" ], "/", !Select [ 1, !Ref "S3ProvisioningBucket" ], "/*" ] ]
  ClojureInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "ClojureRole"
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow SSH traffic to group.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref "PermittedSSHSourceIP"
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        SourceSecurityGroupId: !GetAtt [ ELBSecurityGroup, GroupId ]
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
      VpcId: !Ref "WorkingVPC"
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow TCP traffic to group on port 8080.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: !Ref "PermittedSSHSourceIP"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "-1"
      VpcId: !Ref "WorkingVPC"
  ClojureCollectorGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ""
      DesiredCapacity: "1"
      MinSize: "1"
      MaxSize: "10"
      LaunchConfigurationName: !Ref "ClojureCollectorLaunchConfig"
      NotificationConfigurations:
      - TopicARN: !Ref "NotificationTopic"
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      HealthCheckGracePeriod: "300"
      HealthCheckType: "ELB"
      LoadBalancerNames:
        - !Ref "ElasticLoadBalancer"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '2'
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  ClojureCollectorLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      SecurityGroups:
        - Ref: "InstanceSecurityGroup"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "100"
            VolumeType: "gp2"
      EbsOptimized: False
      IamInstanceProfile: !Ref "ClojureInstanceProfile"
      ImageId:
        !FindInMap [ "RegionAndInstanceTypeToAMIID", Ref: "AWS::Region", Ref: "EnvironmentType" ]
      InstanceType:
        !FindInMap [ "EnviromentTypeToInstanceType", Ref: "EnvironmentType", 64 ]
      InstanceMonitoring: false
      KeyName: !Ref "KeyPair"
      UserData:
        !Base64
          Fn::Sub:
            - |
              #!/bin/bash -xe
              #aws s3 cp ${s3url} /root/.ssh/bitbucket_secret_key
              #chmod 400 /root/.ssh/bitbucket_secret_key
              #aws s3 cp ${s3url} /root/.ssh/config
              #chmod 600 /root/.ssh/config
              sudo yum -y update
              sudo yum install -y git
              sudo pip install ansible
              /usr/local/bin/ansible-pull -d ~/playbooks/ansible-clojure -i 'localhost,' -U https://github.com/henrydobson/ansible-clojure.git --accept-host-key
            - { s3url: !Join [ /, [ "s3:/", !Select [0, !Ref "S3ProvisioningBucket"], !Select [1, !Ref "S3ProvisioningBucket"] ] ] }
  ScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "ClojureCollectorGroup"
      Cooldown: "60"
      PolicyType: "SimpleScaling"
      ScalingAdjustment: 1
  CPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
      - !Ref "ScaleUpPolicy"
      AlarmDescription: "Scale-up if CPU > 70% for 10 minute"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
      - Name: "AutoScalingGroupName"
        Value: !Ref "ClojureCollectorGroup"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: "300"
      Statistic: "Average"
      Threshold: "70"
      Unit: "Percent"
  ElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref "ELBSecurityGroup"
      Scheme: internet-facing
      AvailabilityZones:
        Fn::GetAZs: ""
      Listeners:
      - LoadBalancerPort: '8080'
        InstancePort: '8080'
        Protocol: HTTP
        InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:8080/clojure-collector-1.1.0-standalone/i
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '10'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
Outputs:
  TestResultURL:
    Description: The URL to confirm success or failure or test.
    Value: !Join [ "", [ "http://", !GetAtt [ ElasticLoadBalancer, DNSName ], ":8080/clojure-collector-1.1.0-standalone/i" ] ]
