---
AWSTemplateFormatVersion: "2010-09-09"

Description: ""

Metadata:
  Instances:
    Description: "Information about the instances"

Parameters:
  OperatorEmail:
    Description: Email address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)
    ConstraintDescription: Must be a valid email address.

  EnvironmentType:
    Description: The environment type
    Type: String
    Default: test
    AllowedValues:
      - production
      - test
    ConstraintDescription: Must be a production or test

  InstanceTypeParameter:
    Type: String
    Default: t1.micro
    AllowedValues:
      - t1.micro
      - m1.small
      - m1.large
    Description: Enter t1.micro, m1.small, or m1.large. Default is t1.micro.

  ClojureCollectorKeyPair:
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"

  DBPwd:
    NoEcho: true
    Description: "The database admin account password"
    Type: String
    MinLength: "1"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"

Mappings:
  RegionAndInstanceTypeToAMIID:
    us-east-1:
      test: "ami-8ff710e2"
      production: "ami-f5f41398"
    us-west-2:
      test: "ami-eff1028f"
      production: "ami-d0f506b0"

  EnviromentTypeToInstanceType:
    test: t1.micro
    production: m1.small

Conditions:
  CreateProductionResources: !Equals [ !Ref EnvironmentType, production ]

Resources:
  ClojureCollectorTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        Endpoint: !Ref "OperatorEmail"
        Protocol: "email"

  ClojureCollectorGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ""
      MinSize: "1"
      MaxSize: "10"
      LaunchConfigurationName:
        Ref: "ClojureCollectorLaunchConfig"
      NotificationConfigurations:
        - TopicARN:
          Ref: "ClojureCollectorTopic"
        - NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      HealthCheckGracePeriod: "60"
      HealthCheckType: "ELB"
      LoadBalancerNames:
        - !Ref "ElasticLoadBalancer"

  ClojureCollectorLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      SecurityGroups:
        -
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: "100"
            VolumeType: "gp2"
      ImageId:
        !FindInMap [ "RegionAndInstanceTypeToAMIID", !Ref "AWS::Region", !Ref "EnvironmentType"  ]
      InstanceType:
        !FindInMap [ "EnviromentTypeToInstanceType", !Ref "EnvironmentType" ]
      UserData:
        !Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  ClojureCollectorScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "ClojureCollectorGroup"
      Cooldown: "60"
      MinAdjustmentMagnitude: 1
      PolicyType: "SimpleScaling"
      ScalingAdjustment: 1

  ClojureCollectorScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "ClojureCollectorGroup"
      Cooldown: "60"
      MinAdjustmentMagnitude: 1
      PolicyType: "SimpleScaling"
      ScalingAdjustment: -1

  ClojureCPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: Yes
      AlarmActions:
        - !Ref "ClojureCollectorScaleUpPolicy"
      AlarmDescription: "Scale-up if CPU > 75% for 10 minutes"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
        - Value: !Ref "ClojureCollectorGroup"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: "600"
      Statistic: "Average"
      Threshold: "75"
      Unit: "Percent"

  ClojureCPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: Yes
      AlarmActions:
        - !Ref "ClojureCollectorScaleDownPolicy"
      AlarmDescription: "Scale-up if CPU < 50% for 20 minutes"
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
        - Value: !Ref "ClojureCollectorGroup"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: "1200"
      Statistic: "Average"
      Threshold: "75"
      Unit: "Percent"

  ClojureCollectorElasticLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "clojure-test-elb"
      Scheme: "internet-facing"
      SecurityGroups:
        - String
      Subnets:
        - String
      Tags:
        - Resource Tag


Outputs:
  set of outputs
